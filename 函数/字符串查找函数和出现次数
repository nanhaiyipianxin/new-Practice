char* bianli(char* src, char* dest)              //字符串查找函数
{
	char* z = src;		//遍历用的
	char* w = src;		//存储记录每次比对首地址
	char* tdest = dest;//指向字符串，为啥不用dest？因为要回滚

	while (*z)         //循环src
	{
			while (*z==*tdest &&*z!='\0')//如果两个字符相同为真，然后往下;不为真的时候就停了，并且z不等于\0
			{								//因为如果字符在结尾相同那么两个值最后全相等了\0也相等,然后又自增一次
				z++;						//直接偏移到0后了，tdest检测不到
				tdest++;
			}
		if (*tdest == '\0')return w;//如果上面的循环最后一次自增后，*tdest到了最后的位置，就用w返回首地址
		
		tdest = dest;       //让dest重新赋予tdest值，回到首字符的地址

		z = w;				//让已经被改变的遍历地址，回到上次记录被比对的地址
		z++;				//这个是为了不从被比对地址开始，从比对地址下一个开始
		w = z	;		           //这个是将w的值记录
	}
	return;
}

使用方法
bianli(ww,zz)
-------------------------------------------------------------------------------查找出现函数↓↓↓
char* cishu(char* ee, char* ch)
{
	int n = 0;
	while ((ee = bianli(ee, ch)) != NULL) //如果查找返回值不为空
	{
		ee += strlen(ch); //字符串跳转一个查询大小(ch),让其可以给后面查询
		n++;             //记录出现次数，就是返回值不为空次数
		if (*ee == 0)break;//如果到结尾结束循环

	}

	printf("[%s]出现次数= %d\n", ch, n);
}
使用方法
int main(void)
{
	char* p = "1317503019koko";
	char ch[] = "ko";
	cishu(p, ch);
	return 0;
}
-------------------------------------------------------------------------------查找出现函数（do while）
char* p = "1317503019koko";
char ch[] = "ko";
int count = 0;
do {
	p = bianli(p, ch);   //执行一次
	if(p)				//不是空，就是真，就是执行到返回值
	{
		count++;         //然后++一次
		p += strlen(ch);  //让p跳过已经查找过的
		p = bianli(p,ch);//继续调用
	}
} while (p);             //为假的时候就不运行了 
printf("[%s]出现次数= %d\n", ch, count);
